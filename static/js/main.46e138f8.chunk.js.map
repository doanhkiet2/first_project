{"version":3,"sources":["logo.svg","lookup/components.js","tweets/button.js","tweets/lookup.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","JSON","stringify","xhr","XMLHttpRequest","url","responseType","open","console","log","setRequestHeader","onload","status","response","detail","window","location","href","onerror","e","send","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleActionBackendEvent","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","path","pathname","idRegex","match","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","Fragment","TweetList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","username","apiTweetList","alert","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","onSubmit","newVal","current","value","ref","required","TweetsComponent","setNewTweets","canTweet","temNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackEndLookup","apiTweetDetail","App","src","logo","alt","Boolean","hostname","appEl","getElementById","ReactDOM","render","StrictMode","createElement","TweetsEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.46e138f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\nfunction getCookie(name) {\r\n    var cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n        var cookies = document.cookie.split(';');\r\n        for (var i = 0; i < cookies.length; i++) {\r\n            var cookie = cookies[i].trim();\r\n            // Does this cookie string begin with the name we want?\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n  }\r\n  \r\n\r\n\r\nexport function backendLookup(method, endpoint, callback, data) {\r\n    const csrftoken = getCookie('csrftoken')\r\n\r\n    let jsonData;\r\n    if (data) {\r\n        jsonData = JSON.stringify(data)\r\n    }\r\n    const xhr = new XMLHttpRequest()\r\n    const url = `http://127.0.0.1:8000/api${endpoint}`\r\n    xhr.responseType = \"json\"\r\n    xhr.open(method, url)\r\n\r\n    console.log(csrftoken)\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\")\r\n\r\n    if (csrftoken) {\r\n        // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\r\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n        xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n    }\r\n\r\n    xhr.onload = function () {\r\n        if (xhr.status === 403 ) {\r\n            const detail = xhr.response.detail\r\n            if (detail === \"Authentication credentials were not provided.\") {\r\n                window.location.href = \"/login?showLoginRequired=true\"\r\n            }\r\n        }\r\n        callback(xhr.response, xhr.status)\r\n\r\n    }\r\n    xhr.onerror = function (e) {\r\n\r\n        console.log(e)\r\n        callback({ \"message\": \"the request was an error\" }, 400)\r\n    }\r\n    xhr.send(jsonData)\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport {apiTweetAction } from './lookup'\r\n\r\n\r\nexport function ActionBtn(props) {\r\n    const { tweet, action, didPerformAction } = props\r\n    const likes = tweet.likes ? tweet.likes : 0\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\r\n\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n\r\n    const handleActionBackendEvent = (response, status) => {\r\n        console.log(response, status)\r\n        //response api\r\n        if ((status === 200 || status === 201) && didPerformAction) {\r\n            didPerformAction(response, status)\r\n            // console.log('aaaa', response)\r\n        }\r\n\r\n    }\r\n\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        //post api\r\n        apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n}","import { backendLookup } from '../lookup'\r\n\r\nexport function apiTweetCreate(newTweet, callback) {\r\n    backendLookup(\"POST\", \"/tweets/create/\", callback, { content: newTweet })\r\n}\r\n\r\nexport function apiTweetAction(tweetId, action, callback) {\r\n    const data = { id: tweetId, action: action }\r\n    backendLookup(\"POST\", \"/tweets/action/\", callback, data)\r\n}\r\n\r\nexport function apiTweetList(username, callback) {\r\n    let endpoint = \"/tweets/\"\r\n    if (username) {\r\n        endpoint = `/tweets/?username=${username}`\r\n    }\r\n    backendLookup(\"GET\", endpoint, callback)\r\n}\r\n\r\nexport function apiTweetDetail(tweetId, callback) {\r\n    backendLookup(\"GET\", `/tweets/${tweetId}/`, callback)\r\n}","import React, { useState } from 'react'\r\nimport { ActionBtn } from './button'\r\n\r\n\r\n\r\nfunction ParentTweet(props) {\r\n    const { tweet } = props\r\n    // console.log(tweet.parent, 'aaa')\r\n    return (tweet.parent ? <div className='row'>\r\n        <div className='col-11 mx-auto p-3 border rounded'>\r\n            <p className='mb3 text-muted small'>Reweet</p>\r\n            <Tweet hideActions className={' '} tweet={tweet.parent} />\r\n        </div>\r\n    </div> : null\r\n    )\r\n}\r\n\r\n\r\nexport function Tweet(props) {\r\n    const { tweet, didRetweet, hideActions } = props\r\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\r\n\r\n    const path = window.location.pathname\r\n    const idRegex = /(?<tweetid>\\d+)/\r\n    const match = path.match(idRegex)\r\n    const urlTweetId = match ? match.groups.tweetid : -1\r\n    const isDetail = `${tweet.id}` === `${urlTweetId}`\r\n\r\n    const handleLink = (event) => {\r\n        event.preventDefault()\r\n        window.location.href = `tweets/${tweet.id}`\r\n    }\r\n\r\n\r\n    const handlePerformAction = (newActionTweet, status) => {\r\n        if (status === 200) {\r\n            setActionTweet(newActionTweet)\r\n        } else if (status === 201) {\r\n            if (didRetweet) {\r\n                didRetweet(newActionTweet)\r\n                // console.log(newActionTweet)\r\n            }\r\n        }\r\n    }\r\n\r\n    const className = props.className ? props.className : 'col-10 max-auto col-md-6'\r\n    return <div className={className}>\r\n        <div>\r\n            <p>{tweet.id} - {tweet.content}</p>\r\n            <ParentTweet tweet={tweet} />\r\n        </div>\r\n        <div className='btn btn-group'>\r\n            {(actionTweet && hideActions !== true) && <React.Fragment>            \r\n                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: \"like\", display: \"Likes\" }} />\r\n                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: \"unlike\", display: \"Unlike\" }} />\r\n                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: \"retweet\", display: \"Retweet\" }} />\r\n            </React.Fragment>\r\n            }\r\n            {isDetail === true ? null : <button className='btn btn-outline-primary' onClick={handleLink}>View</button>}\r\n        </div>\r\n    </div>\r\n\r\n}   \r\n","import React, { useEffect, useState } from 'react'\r\nimport {apiTweetList } from './lookup'\r\nimport {Tweet} from './detail'\r\n\r\n\r\nexport function TweetList(props) {\r\n    // troi ma sao update nhieu lan the\r\n    // console.log('test',props.newTweets) \r\n    const [tweetsInit, setTweetsInit] = useState([])\r\n    const [tweets, setTweets] = useState([])\r\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\r\n    useEffect(() => {\r\n        const final = [...props.newTweets].concat(tweetsInit)\r\n        if (final.length !== tweets.length) {\r\n            setTweets(final)\r\n        }\r\n    }, [props.newTweets, tweets, tweetsInit])\r\n    useEffect(() => {\r\n        //do my lookup\r\n        if (tweetsDidSet === false) {\r\n            const handleTweetListLookup = (response, status) => {\r\n                if (status === 200) {\r\n                    setTweetsInit(response)\r\n                    setTweetsDidSet(true)\r\n                } else {\r\n                    alert(\"there was an error\")\r\n                }\r\n            }\r\n            apiTweetList(props.username, handleTweetListLookup)\r\n        }\r\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\r\n\r\n\r\n    const handleDidRetweet = (newTweet) => {\r\n        const updateTweetsInit = [...tweetsInit]\r\n        updateTweetsInit.unshift(newTweet)\r\n        setTweetsInit(updateTweetsInit)        \r\n        const updateFinalTweets = [...tweets]\r\n        updateFinalTweets.unshift(tweets)\r\n        setTweets(updateFinalTweets)\r\n    }\r\n    return tweets.map((item, index) => {\r\n        return <Tweet \r\n        tweet={item}\r\n        didRetweet={handleDidRetweet} \r\n        key={`${index}-{tweet.id}`} \r\n        className='my-5 py-6 border bg-white text-dark' />\r\n    })\r\n}","import React from 'react'\r\nimport { apiTweetCreate } from './lookup'\r\n\r\n\r\n\r\nexport function TweetCreate(props) {\r\n    const textAreaRef = React.createRef()\r\n    const { didTweet } = props\r\n    const handleBackendUpdate = (response, status) => {\r\n        // backend api response handler\r\n        if (status === 201) {\r\n            didTweet(response)\r\n        } else {\r\n            console.log(response)\r\n            alert(\"an error occured please try again\")\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const newVal = textAreaRef.current.value\r\n        //backend api request\r\n        apiTweetCreate(newVal, handleBackendUpdate)\r\n        textAreaRef.current.value = \"\"\r\n    }\r\n    return <div className={props.className}>\r\n        <form onSubmit={handleSubmit}>\r\n            <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\r\n            </textarea>\r\n            <button type='submmit' className='btn btn-primary my-3'>Tweet</button>\r\n        </form>\r\n    </div>\r\n\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport { TweetList } from './list'\r\nimport { TweetCreate } from './create'\r\nimport { Tweet } from './detail'\r\nimport { apiTweetDetail } from './lookup'\r\n\r\n\r\nexport function TweetsComponent(props) {\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const canTweet = props.canTweet === \"false\" ? false : true\r\n    const handleNewTweet = (newTweet) => {\r\n        let temNewTweets = [...newTweets]\r\n        temNewTweets.unshift(newTweet)\r\n        setNewTweets(temNewTweets)\r\n    }\r\n\r\n    return <div className={props.className}>\r\n        {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\r\n        <TweetList newTweets={newTweets} {...props} />\r\n    </div>\r\n}\r\n\r\n\r\n\r\nexport function TweetDetailComponent(props) {\r\n    const { tweetId } = props\r\n    const [didLookup, setDidLookup] = useState(false)\r\n    const [tweet, setTweet] = useState(null)\r\n\r\n    const handleBackEndLookup = (response, status) => {\r\n        if (status === 200) {\r\n            setTweet(response)\r\n        } else { \r\n            console.log(response)\r\n            alert(\"there was an error finding your tweet\")\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (didLookup === false) {\r\n            apiTweetDetail(tweetId, handleBackEndLookup)\r\n            setDidLookup(true)\r\n        }\r\n    }, [tweetId, didLookup, setDidLookup])\r\n    return tweet === null ? null : <Tweet tweet={tweet} className={props.className}/>\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\nfunction App() {\n   return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div> \n          <TweetsComponent />\n        </div>\n      </header>\n    </div>\n    \n  );\n  \n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { TweetsComponent, TweetDetailComponent } from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\n\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>, appEl\n  )\n};\n\nconst e = React.createElement\nconst TweetsEl = document.getElementById('tweetme-2')\nif (TweetsEl) {\n  ReactDOM.render(\n    e(TweetsComponent, TweetsEl.dataset), TweetsEl\n\n  )\n};\n\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-2-detail\")\n\ntweetDetailElements.forEach(container=> {\n    ReactDOM.render(\n        e(TweetDetailComponent, container.dataset), \n        container);\n    })\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}